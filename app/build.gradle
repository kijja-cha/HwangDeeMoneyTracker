plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

apply from: "$rootDir/gradle/variant-generator.gradle"

def variantProps = new Properties()
file("$rootDir/variant.properties").withInputStream { variantProps.load(it) }

apply {
    from("$rootDir/gradle/version.gradle")
    from("$rootDir/gradle/dependencies.gradle")
    from("$rootDir/gradle/dependencies-size.gradle.kts")
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.kijjjac.hwangdee"
        minSdk 21
        targetSdk 32

        versionName "${versionNameApp}"
        versionCode versionBuildNumber

        buildConfigField("String", "VERSION_NAME", "\"${versionName}\"")
        buildConfigField("String", "VERSION_CODE", "\"${versionCode}\"")

        renderscriptTargetApi 21
        renderscriptSupportModeEnabled true

        multiDexEnabled true

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a'
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments runnerBuilder: 'de.mannodermaus.junit5.AndroidJUnit5Builder'
    }

    flavorDimensions 'platform', 'environment'

    productFlavors {
        google { dimension 'platform' }
        huawei { dimension 'platform' }

        staging {
            applicationIdSuffix ".staging"
            dimension 'environment'
        }
        preprod {
            applicationIdSuffix ".preprod"
            dimension 'environment'
        }
        prod {
            dimension 'environment'
        }
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
        resources.excludes.add("LICENSE")
        resources.excludes.add("LICENSE.txt")
        resources.excludes.add("third_party/java_src/error_prone/project/annotations/Annotations.gwt.xml")
        resources.excludes.add("third_party/java_src/error_prone/project/annotations/Google_internal.gwt.xml")
        resources.excludes.add("error_prone/Annotations.gwt.xml")
        resources.excludes.add("DebugProbesKt.bin")

        pickFirst 'win32-x86-64/attach_hotspot_windows.dll'
        pickFirst 'win32-x86/attach_hotspot_windows.dll'

        jniLibs {
            useLegacyPackaging = true
        }
    }

    bundle {
        density.enableSplit = true
        abi.enableSplit = true
        language.enableSplit = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            setIgnoreFailures(false)
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
}

dependencies {

    AndroidComponents()

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
}

if (project.rootProject.file('variant.properties').exists()) {
    def devProps = new Properties()
    devProps.load(project.rootProject.file('variant.properties').newDataInputStream())
    def variantConfig = devProps.platform + devProps.environment

    android.variantFilter { variant ->
        def platformName = variant.getFlavors().get(0).name
        def environmentName = variant.getFlavors().get(1).name
        def variantName = platformName + environmentName

        if (variantConfig != variantName) {
            variant.setIgnore(true)
        }
    }
}

task printVersion {
    doLast {
        println android.defaultConfig.versionName
        println android.defaultConfig.versionCode
    }
}